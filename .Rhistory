column(2,
selectInput('X', 'Choose X', column_names, column_names[1]),
selectInput('Y', 'Choose Y', column_names, column_names[3]),
selectInput('Splitby', 'Split By', column_names, column_names[3])
),
column(4, plotOutput('plot_01')),
column(6, DT::dataTableOutput("table_01", width = "100%"))
)
)
runApp('GitHub/Data-332/Shiny Apps/MTCars app/MTCars App.R')
runApp('GitHub/Data-332/Shiny Apps/MTCars app/MTCars App.R')
runApp('GitHub/Data-332/Shiny Apps/MTCars app/MTCars App.R')
runApp('GitHub/Data-332/Shiny Apps/MTCars app/MTCars App.R')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/MTCars app/MTCars App.R')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
shiny::runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/MTCars app/MTCars App.R')
runApp('GitHub/Data-332/Shiny Apps/MTCars app/MTCars App.R')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
# Makes Mock Data Set
# Set seed for reproducibility
set.seed(123)
# Generate 50 observations of mock data
n <- 50  # Number of observations
# Create a data frame with mock data
mock_data <- data.frame(
MPH = round(runif(n, min = 40, max = 80), 1),  # Random MPH between 40 and 80
TimeOfDay = sample(c("Morning", "Afternoon", "Evening", "Night"), n, replace = TRUE),  # Random time of day
Temperature = round(rnorm(n, mean = 70, sd = 10), 1),  # Random temperature around 70°F with SD of 10
Weather = sample(c("Sunny", "Cloudy", "Rainy", "Snowy"), n, replace = TRUE)  # Random weather conditions
)
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
column_names <- colnames(mock_data)
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/MTCars app/MTCars App.R')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
runApp('GitHub/Data-332/Shiny Apps/Counting_Cars_IRL_App')
shiny::runApp('GitHub/Data-332/Counting_Cars_IRL_App')
knitr::opts_chunk$set(echo = TRUE)
get_symbols <- function(){
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
sample(wheel, size = 3, replace = TRUE,
prob = c(.03, .03, .06, .1, .25, .01, .52))
}
score <- function(symbols) {
same <- symbols[1] == symbols[2] & symbols[2] == symbols[3]
bars <- symbols %in% c("B", "BB", "BBB")
if(same){
payouts <- c("DD" = 100, "7" = 80, "BBB" = 40, "BB" = 25, "B" = 10, "C" = 10, "0" = 0)
prize <- unname(payouts[symbols[1]])
} else if(all(bars)){
prize <- 5
} else{
cherries <- sum(symbols == "C")
prize <- c(0, 2, 5)[cherries + 1]
}
diamonds <- sum(symbols == "DD")
prize * 2 ^ diamonds
}
play <- function(){
symbols <- get_symbols()
print(symbols)
score(symbols)
}
# adding attributs to objects
one_play <- play()
one_play
attributes(one_play)
# Right way to do it
attr(one_play, "symbols") <- c("B", "0", "B")
attributes(one_play)
one_play
# adding attributs to objects
one_play <- play()
one_play
one_play
one_play
# Right way to do it
attr(one_play, "symbols") <- c("B", "0", "B")
one_play
attributes(one_play)
one_play
attributes(one_play)
# to look u the value of any attribue
attr(one_play, "symbols")
one_play
play <- function() {
symbols <- get_symbols()
print(symbols)
score(symbols)
}
play <- function() {
symbols <- get_symbols()
prize <- score(symbols)
attr(prize, "symbols") <- symbols
prize
}
# play now returns both the prize and th symbols associatd with the prize
play()
# play now returns both the prize and th symbols associatd with the prize
play()
two_play <- play()
two_play
slot_display <- function(prize){
# extract symbols
symbols <- attr(prize, "symbols")
# collapse symbols into single string
symbols <- paste(symbols, collapse = " ")
# combine symbol with prize as a character string
# \n is special escape sequence for a new line (i.e. return or enter)
string <- paste(symbols, prize, sep = "\n$")
# display character string in console without quotes
cat(string)
}
slot_display(one_play)
symbols <- attr(one_play, "symbols")
symbols
# collapsing the letters into one string
symbols <- paste(symbols, collapse = " ")
symbols
# seperatingt the inputs in the nw string:
prize <- one_play
string <- paste(symbols, prize, sep = "\n$")
string
slot_display(play())
slot_display(play())
slot_display(one_play)
slot_display(play())
# givign on_pla a class
class(one_play) <- "slots"
# Adding classes to the play function
play <- function() {
symbols <- get_symbols()
structure(score(symbols), symbols = symbols, class = "slots")
}
play()
class(play())
play()
# Adding classes to the play function
play <- function() {
symbols <- get_symbols()
structure(score(symbols), symbols = symbols, class = "slots")
}
play()
play()
print.slots <- function(x, ...) {
slot_display(x)
}
# givign on_pla a class
class(one_play) <- "slots"
print.slots <- function(x, ...) {
slot_display(x)
}
# Adding classes to the play function
play <- function() {
symbols <- get_symbols()
structure(score(symbols), symbols = symbols, class = "slots")
}
class(play())
play()
die <- c(1, 2, 3, 4, 5, 6)
# this function in R provides a uick way to write out every combinatin of the elements in n vectors.
rolls <- expand.grid(die, die)
rolls
# You can determine the value of each roll once you’ve made your list of outcomes. This will be the sum of the two dice, which you can calculate using R’s element-wise execution:
rolls$value <- rolls$Var1 + rolls$Var2
head(rolls, 3)
# lookup table for probabilitues of rollings valeus in var1
prob <- c("1" = 1/8, "2" = 1/8, "3" = 1/8, "4" = 1/8, "5" = 1/8, "6" = 3/8)
prob
# can subset rolls$var1 to get a vector of probabilities
rolls$Var1
prob[rolls$Var1]
rolls$prob1 <- prob[rolls$Var1]
head(rolls, 3)
# can do the sam far var2
rolls$prob2 <- prob[rolls$Var2]
head(rolls, 3)
# can calculat the probability of rolling each combination:
rolls$prob <- rolls$prob1 * rolls$prob2
head(rolls, 3)
# expected value
sum(rolls$value * rolls$prob)
# dfine wheel
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
# All combinations
combos <- expand.grid(wheel, wheel, wheel, stringsAsFactors = FALSE)
combos
}
}
# Calulating probabilities
get_symbols <- function() {
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
sample(wheel, size = 3, replace = TRUE,
prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52))
}
# make lookup table
prob <- c("DD" = 0.03, "7" = 0.03, "BBB" = 0.06,
"BB" = 0.1, "B" = 0.25, "C" = 0.01, "0" = 0.52)
combos$prob1 <- prob[combos$Var1]
combos$prob2 <- prob[combos$Var2]
combos$prob3 <- prob[combos$Var3]
head(combos, 3)
combos$prob <- combos$prob1 * combos$prob2 * combos$prob3
head(combos, 3)
# sum of probabilities
sum(combos$prob)
combos$prize <- NA
head(combos, 3)
for (i in 1:nrow(combos)) {
symbols <- c(combos[i, 1], combos[i, 2], combos[i, 3])
combos$prize[i] <- score(symbols)
}
head(combos, 3)
sum(combos$prize * combos$prob)
# Challenge: accounting for different score variations
score <- function(symbols) {
diamonds <- sum(symbols == "DD")
cherries <- sum(symbols == "C")
# identify case
# since diamonds are wild, only nondiamonds
# matter for three of a kind and all bars
slots <- symbols[symbols != "DD"]
same <- length(unique(slots)) == 1
bars <- slots %in% c("B", "BB", "BBB")
# assign prize
if (diamonds == 3) {
prize <- 100
} else if (same) {
payouts <- c("7" = 80, "BBB" = 40, "BB" = 25,
"B" = 10, "C" = 10, "0" = 0)
prize <- unname(payouts[slots[1]])
} else if (all(bars)) {
prize <- 5
} else if (cherries > 0) {
# diamonds count as cherries
# so long as there is one real cherry
prize <- c(0, 2, 5)[cherries + diamonds + 1]
} else {
prize <- 0
}
# double for each diamond
prize * 2^diamonds
}
# Calculating epected values
for (i in 1:nrow(combos)) {
symbols <- c(combos[i, 1], combos[i, 2], combos[i, 3])
combos$prize[i] <- score(symbols)
}
sum(combos$prize * combos$prob)
change_symbols <- function(vec){
for (i in 1:length(vec)){
if (vec[i] == "DD") {
vec[i] <- "joker"
} else if (vec[i] == "C") {
vec[i] <- "ace"
} else if (vec[i] == "7") {
vec[i] <- "king"
}else if (vec[i] == "B") {
vec[i] <- "queen"
} else if (vec[i] == "BB") {
vec[i] <- "jack"
} else if (vec[i] == "BBB") {
vec[i] <- "ten"
} else {
vec[i] <- "nine"
}
}
vec
}
vec <- c("DD", "C", "7", "B", "BB", "BBB", "0")
change_symbols(vec)
##  "joker" "ace"   "king"  "queen" "jack"  "ten"   "nine"
many <- rep(vec, 1000000)
system.time(change_symbols(many))
##    user  system elapsed
##  30.057   0.031  30.079
vec[vec == "DD"]
vec[vec == "C"]
vec[vec == "7"]
vec[vec == "B"]
vec[vec == "BB"]
vec[vec == "BBB"]
vec[vec == "0"]
vec[vec == "DD"] <- "joker"
vec[vec == "C"] <- "ace"
vec[vec == "7"] <- "king"
vec[vec == "B"] <- "queen"
vec[vec == "BB"] <- "jack"
vec[vec == "BBB"] <- "ten"
vec[vec == "0"] <- "nine"
change_vec <- function (vec) {
vec[vec == "DD"] <- "joker"
vec[vec == "C"] <- "ace"
vec[vec == "7"] <- "king"
vec[vec == "B"] <- "queen"
vec[vec == "BB"] <- "jack"
vec[vec == "BBB"] <- "ten"
vec[vec == "0"] <- "nine"
vec
}
system.time(change_vec(many))
change_vec2 <- function(vec){
tb <- c("DD" = "joker", "C" = "ace", "7" = "king", "B" = "queen",
"BB" = "jack", "BBB" = "ten", "0" = "nine")
unname(tb[vec])
}
system.time(change_vec(many)
system.time(change_vec(many)
system.time(change_vec(many)
system.time(change_vec(many))
system.time(change_vec(many))
change_vec2 <- function(vec){
tb <- c("DD" = "joker", "C" = "ace", "7" = "king", "B" = "queen",
"BB" = "jack", "BBB" = "ten", "0" = "nine")
unname(tb[vec])
}
system.time(change_vec(many))
winnings <- vector(length = 1000000)
for (i in 1:1000000) {
winnings[i] <- play()
}
mean(winnings)
system.time(for (i in 1:1000000) {
winnings[i] <- play()
})
# run fastre with vectorized code
# rewrit functios for this
get_many_symbols <- function(n) {
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
vec <- sample(wheel, size = 3 * n, replace = TRUE,
prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52))
matrix(vec, ncol = 3)
}
play_many <- function(n) {
symb_mat <- get_many_symbols(n = n)
data.frame(w1 = symb_mat[,1], w2 = symb_mat[,2],
w3 = symb_mat[,3], prize = score_many(symb_mat))
}
symbols <- matrix(
c("DD", "DD", "DD",
"C", "DD", "0",
"B", "B", "B",
"B", "BB", "BBB",
"C", "C", "0",
"7", "DD", "DD"), nrow = 6, byrow = TRUE)
score_many <- function(symbols) {
# Step 1: Assign base prize based on cherries and diamonds ---------
## Count the number of cherries and diamonds in each combination
cherries <- rowSums(symbols == "C")
diamonds <- rowSums(symbols == "DD")
## Wild diamonds count as cherries
prize <- c(0, 2, 5)[cherries + diamonds + 1]
## ...but not if there are zero real cherries
### (cherries is coerced to FALSE where cherries == 0)
prize[!cherries] <- 0
# Step 2: Change prize for combinations that contain three of a kind
same <- symbols[, 1] == symbols[, 2] &
symbols[, 2] == symbols[, 3]
payoffs <- c("DD" = 100, "7" = 80, "BBB" = 40,
"BB" = 25, "B" = 10, "C" = 10, "0" = 0)
prize[same] <- payoffs[symbols[same, 1]]
# Step 3: Change prize for combinations that contain all bars ------
bars <- symbols == "B" | symbols ==  "BB" | symbols == "BBB"
all_bars <- bars[, 1] & bars[, 2] & bars[, 3] & !same
prize[all_bars] <- 5
# Step 4: Handle wilds ---------------------------------------------
## combos with two diamonds
two_wilds <- diamonds == 2
### Identify the nonwild symbol
one <- two_wilds & symbols[, 1] != symbols[, 2] &
symbols[, 2] == symbols[, 3]
two <- two_wilds & symbols[, 1] != symbols[, 2] &
symbols[, 1] == symbols[, 3]
three <- two_wilds & symbols[, 1] == symbols[, 2] &
symbols[, 2] != symbols[, 3]
### Treat as three of a kind
prize[one] <- payoffs[symbols[one, 1]]
prize[two] <- payoffs[symbols[two, 2]]
prize[three] <- payoffs[symbols[three, 3]]
## combos with one wild
one_wild <- diamonds == 1
### Treat as all bars (if appropriate)
wild_bars <- one_wild & (rowSums(bars) == 2)
prize[wild_bars] <- 5
### Treat as three of a kind (if appropriate)
one <- one_wild & symbols[, 1] == symbols[, 2]
two <- one_wild & symbols[, 2] == symbols[, 3]
three <- one_wild & symbols[, 3] == symbols[, 1]
prize[one] <- payoffs[symbols[one, 1]]
prize[two] <- payoffs[symbols[two, 2]]
prize[three] <- payoffs[symbols[three, 3]]
# Step 5: Double prize for every diamond in combo ------------------
unname(prize * 2^diamonds)
}
system.time(play_many(10000000))
install.packages("perl")
library(shiny); runApp('GitHub/Data-332-Final Project/Olympic Medals App.R')
library(shiny)
library(shinydashboard)
library(DT)
library(ggplot2)
library(readxl)
library(dplyr)
runApp('GitHub/Data-332-Final Project/Olympic Medals App.R')
df_full <- read_rds("Full Data Set.rdsd")
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332-Final Project/Data")
df_full <- read_rds("Full Data Set.rdsd")
df_full <- read_rds("Full Data Set.rds")
library(readr)
df_full <- read_rds("Full Data Set.rds")
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332-Final Project")
df_full <- read_rds("Full Data Set.rds")
df_full <- read_rds("Full Data Set")
View(df_full)
runApp('Olympic Medals App.R')
runApp('Olympic Medals App.R')
runApp('Olympic Medals App.R')
runApp('Olympic Medals App.R')
runApp('Olympic Medals App.R')
runApp('Olympic Medals App.R')
runApp('Olympic Medals App.R')
runApp('Olympic Medals App.R')
runApp('Olympic Medals App.R')
runApp('Olympic Medals App.R')
runApp('Olympic Medals App.R')
runApp('Olympic Medals App.R')
runApp('Olympic Medals App.R')
library(shiny); runApp('Olympic Medals App.R')
library(shiny)
library(shinydashboard)
library(DT)
library(ggplot2)
library(readxl)
library(dplyr)
library(readr)
runApp('Olympic Medals App.R')
library(gridExtra)
runApp('Olympic Medals App.R')
