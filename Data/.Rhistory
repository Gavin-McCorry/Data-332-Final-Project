system.time(for (i in 1:1000000) {
winnings[i] <- play()
})
# run fastre with vectorized code
# rewrit functios for this
get_many_symbols <- function(n) {
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
vec <- sample(wheel, size = 3 * n, replace = TRUE,
prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52))
matrix(vec, ncol = 3)
}
play_many <- function(n) {
symb_mat <- get_many_symbols(n = n)
data.frame(w1 = symb_mat[,1], w2 = symb_mat[,2],
w3 = symb_mat[,3], prize = score_many(symb_mat))
}
symbols <- matrix(
c("DD", "DD", "DD",
"C", "DD", "0",
"B", "B", "B",
"B", "BB", "BBB",
"C", "C", "0",
"7", "DD", "DD"), nrow = 6, byrow = TRUE)
score_many <- function(symbols) {
# Step 1: Assign base prize based on cherries and diamonds ---------
## Count the number of cherries and diamonds in each combination
cherries <- rowSums(symbols == "C")
diamonds <- rowSums(symbols == "DD")
## Wild diamonds count as cherries
prize <- c(0, 2, 5)[cherries + diamonds + 1]
## ...but not if there are zero real cherries
### (cherries is coerced to FALSE where cherries == 0)
prize[!cherries] <- 0
# Step 2: Change prize for combinations that contain three of a kind
same <- symbols[, 1] == symbols[, 2] &
symbols[, 2] == symbols[, 3]
payoffs <- c("DD" = 100, "7" = 80, "BBB" = 40,
"BB" = 25, "B" = 10, "C" = 10, "0" = 0)
prize[same] <- payoffs[symbols[same, 1]]
# Step 3: Change prize for combinations that contain all bars ------
bars <- symbols == "B" | symbols ==  "BB" | symbols == "BBB"
all_bars <- bars[, 1] & bars[, 2] & bars[, 3] & !same
prize[all_bars] <- 5
# Step 4: Handle wilds ---------------------------------------------
## combos with two diamonds
two_wilds <- diamonds == 2
### Identify the nonwild symbol
one <- two_wilds & symbols[, 1] != symbols[, 2] &
symbols[, 2] == symbols[, 3]
two <- two_wilds & symbols[, 1] != symbols[, 2] &
symbols[, 1] == symbols[, 3]
three <- two_wilds & symbols[, 1] == symbols[, 2] &
symbols[, 2] != symbols[, 3]
### Treat as three of a kind
prize[one] <- payoffs[symbols[one, 1]]
prize[two] <- payoffs[symbols[two, 2]]
prize[three] <- payoffs[symbols[three, 3]]
## combos with one wild
one_wild <- diamonds == 1
### Treat as all bars (if appropriate)
wild_bars <- one_wild & (rowSums(bars) == 2)
prize[wild_bars] <- 5
### Treat as three of a kind (if appropriate)
one <- one_wild & symbols[, 1] == symbols[, 2]
two <- one_wild & symbols[, 2] == symbols[, 3]
three <- one_wild & symbols[, 3] == symbols[, 1]
prize[one] <- payoffs[symbols[one, 1]]
prize[two] <- payoffs[symbols[two, 2]]
prize[three] <- payoffs[symbols[three, 3]]
# Step 5: Double prize for every diamond in combo ------------------
unname(prize * 2^diamonds)
}
system.time(play_many(10000000))
install.packages("perl")
library(readxl)
library(dplyr)
library(tidyverse)
library(tidyr)
library(reshape2)
library(ggplot2)
library(gridExtra)
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332-Final Project/Data")
df_full <- read_rds("Full Data Set")
library(shiny); runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
View(df_full)
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
ggplot(df_full, aes(x = Immigration_Perc_of_total_Pop, y = Total_Medals)) +
geom_point(aes(color = Country), size = 3, alpha = 0.7, show.legend = FALSE) + # Points colored by country
geom_smooth(method = "lm", se = FALSE, color = "black", linetype = "dashed") + # Add regression line
scale_x_continuous(limits = c(0, 100), breaks = seq(0, 100, 10)) + # Set x-axis limits and breaks
labs(title = "Total Medals by Immigration ",
x = "Immigrant Percentage of Total Population",
y = "Total Medals",
color = "Country") + # Add color legend
theme_minimal(base_size = 15) + # Use a minimal theme with larger base font size
theme(
legend.position = "bottom", # Position the legend at the bottom
strip.background = element_rect(fill = "lightblue", color = "black"), # Customize facet strip background
strip.text = element_text(face = "bold") # Bold facet strip text
) +
facet_wrap(~ Year, ncol = 3) # Facet by Year with 3 columns
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
df_full <- read_rds("Full Data Set.rds")
# top 10 countries medals vs top 10 gdp
top_ten_medal_winners <- df_full %>%
group_by(Year) %>%
arrange(Year, desc(Total_Medals)) %>%
slice(1:10) %>%
mutate(Category = "Top Medals")
top_gdp_countries <- df_full %>%
group_by(Year) %>%
arrange(Year, desc(GDP)) %>%
slice(1:10) %>%
mutate(Category = "Top GDP")
medal_plot <- ggplot(top_ten_medal_winners, aes(x = reorder(Country, Total_Medals), y = Total_Medals)) +
geom_bar(stat = "identity", position = "dodge", fill = "red") +
scale_y_continuous(labels = abs, expand = c(0, 0)) +
facet_wrap(~ Year, scales = "free_x") +
labs(title = "Top 10 Medal Winners Each Year",
y = "Total Medals") +
theme_minimal() +
theme(axis.text.x = element_blank(),  # Remove x-axis labels
axis.ticks.x = element_blank(), # Remove x-axis ticks
strip.text = element_text(size = 8)) + # Adjust strip text size
coord_flip()
medal_plot
medal_plot <- ggplot(top_ten_medal_winners, aes(x = reorder(Country, Total_Medals), y = Total_Medals)) +
geom_bar(stat = "identity", position = "dodge", fill = "red") +
scale_y_continuous(labels = abs, expand = c(0, 0)) +
facet_wrap(~ Year, scales = "free_x") +
labs(title = "Top 10 Medal Winners Each Year",
y = "Total Medals") +
theme(axis.text.x = element_blank(),  # Remove x-axis labels
axis.ticks.x = element_blank(), # Remove x-axis ticks
strip.text = element_text(size = 8)) + # Adjust strip text size
coord_flip() +
scale_y_continuous(position = "right")
medal_plot
medal_plot <- ggplot(top_ten_medal_winners, aes(x = reorder(Country, Total_Medals), y = Total_Medals)) +
geom_bar(stat = "identity", position = "dodge", fill = "red") +
scale_y_continuous(labels = abs, expand = c(0, 0), sec.axis = dup_axis()) +
facet_wrap(~ Year, scales = "free_x") +
labs(title = "Top 10 Medal Winners Each Year",
y = "Total Medals") +
theme_minimal() +
theme(axis.text.x = element_blank(),  # Remove x-axis labels
axis.ticks.x = element_blank(), # Remove x-axis ticks
strip.text = element_text(size = 8)) + # Adjust strip text size
coord_flip()
medal_plot
medal_plot <- ggplot(top_ten_medal_winners, aes(x = reorder(Country, Total_Medals), y = Total_Medals)) +
geom_bar(stat = "identity", position = "dodge", fill = "red") +
scale_y_continuous(labels = abs, expand = c(0, 0), sec.axis = dup_axis()) +
facet_wrap(~ Year, scales = "free_x") +
labs(title = "Top 10 Medal Winners Each Year",
y = "Total Medals") +
theme_minimal() +
theme(axis.text.x = element_blank(),  # Remove x-axis labels
axis.ticks.x = element_blank(), # Remove x-axis ticks
strip.text = element_text(size = 8), # Adjust strip text size
axis.text.y.right = element_text(color = "black")) + # Add color to the secondary y-axis
coord_flip()
medal_plot
medal_plot <- ggplot(top_ten_medal_winners, aes(x = reorder(Country, Total_Medals), y = Total_Medals)) +
geom_bar(stat = "identity", position = "dodge", fill = "red") +
scale_y_continuous(labels = abs, expand = c(0, 0)) +
facet_wrap(~ Year, scales = "free_x") +
labs(title = "Top 10 Medal Winners Each Year") +
theme_minimal() +
theme(axis.text.x = element_blank(),  # Remove x-axis labels
axis.ticks.x = element_blank(), # Remove x-axis ticks
strip.text = element_text(size = 8)) + # Adjust strip text size
coord_flip()
medal_plot
gdp_plot <- ggplot(combined_data_GDP_VS_Medals, aes(x = reorder(Country, GDP), y = -1 * GDP)) +
geom_bar(stat = "identity", position = "dodge", fill = "blue") +
scale_y_continuous(labels = abs, expand = c(0, 0), position = "right") +
facet_wrap(~ Year, scales = "free_x") +
labs(title = "Top 10 GDP Countries Each Year") +
theme_minimal() +
coord_flip()
gdp_plot
top_gdp_countries <- df_full %>%
group_by(Year) %>%
arrange(Year, desc(GDP)) %>%
slice(1:10) %>%
mutate(Category = "Top GDP")
gdp_plot <- ggplot(top_gdp_countries, aes(x = reorder(Country, GDP), y = -1 * GDP)) +
geom_bar(stat = "identity", position = "dodge", fill = "blue") +
scale_y_continuous(labels = abs, expand = c(0, 0), position = "right") +
facet_wrap(~ Year, scales = "free_x") +
labs(title = "Top 10 GDP Countries Each Year") +
theme_minimal() +
coord_flip()
gdp_plot
setwd("C:/Users/gwmcc/OneDrive/Documents/GitHub/Data-332-Final Project/Data")
df_medals <- read.csv("Summer_olympic_Medals.csv")
View(df_medals)
# top 10 countries medals vs top 10 gdp
top_ten_medal_winners <- df_full %>%
filter(Year == 2016) %>%
group_by(Year) %>%
arrange(desc(Total_Medals)) %>%
slice(1:10) %>%
mutate(Category = "Top Medals")
View(top_ten_medal_winners)
medal_plot <- ggplot(top_ten_medal_winners, aes(x = reorder(Country, Total_Medals), y = Total_Medals)) +
geom_bar(stat = "identity", position = "dodge", fill = "red") +
scale_y_continuous(labels = abs, expand = c(0, 0)) +
facet_wrap(~ Year, scales = "free_x") +
labs(title = "Top 10 Medal Winners Each Year") +
theme_minimal() +
theme(axis.text.x = element_blank(),  # Remove x-axis labels
axis.ticks.x = element_blank(), # Remove x-axis ticks
strip.text = element_text(size = 8)) + # Adjust strip text size
coord_flip()
medal_plot
top_gdp_countries <- df_full %>%
filter(Year == 2016) %>%
group_by(Year) %>%
arrange(Year, desc(GDP)) %>%
slice(1:10) %>%
mutate(Category = "Top GDP")
gdp_plot <- ggplot(top_gdp_countries, aes(x = reorder(Country, GDP), y = -1 * GDP)) +
geom_bar(stat = "identity", position = "dodge", fill = "blue") +
scale_y_continuous(labels = abs, expand = c(0, 0), position = "right") +
facet_wrap(~ Year, scales = "free_x") +
labs(title = "Top 10 GDP Countries Each Year") +
theme_minimal() +
coord_flip()
gdp_plot
medal_plot
coord_flip()
gdp_plot
gdp_plot <- ggplot(top_gdp_countries, aes(x = reorder(Country, GDP), y = -1 * GDP)) +
geom_bar(stat = "identity", position = "dodge", fill = "blue") +
scale_y_continuous(labels = abs, expand = c(0, 0), position = "right") +
facet_wrap(~ Year, scales = "free_x") +
labs(title = "Top 10 GDP Countries Each Year") +
theme_minimal() +
theme(axis.text.x = element_blank(),  # Remove x-axis labels
axis.ticks.x = element_blank(), # Remove x-axis ticks
strip.text = element_text(size = 8)) +
coord_flip() +
xlabel("Country")
gdp_plot <- ggplot(top_gdp_countries, aes(x = reorder(Country, GDP), y = -1 * GDP)) +
geom_bar(stat = "identity", position = "dodge", fill = "blue") +
scale_y_continuous(labels = abs, expand = c(0, 0), position = "right") +
facet_wrap(~ Year, scales = "free_x") +
labs(title = "Top 10 GDP Countries Each Year") +
theme_minimal() +
theme(axis.text.x = element_blank(),  # Remove x-axis labels
axis.ticks.x = element_blank(), # Remove x-axis ticks
strip.text = element_text(size = 8)) +
coord_flip() +
labs(
x = "Country",
y = "GDP"
)
gdp_plot
medal_plot <- ggplot(top_ten_medal_winners, aes(x = reorder(Country, Total_Medals), y = Total_Medals)) +
geom_bar(stat = "identity", position = "dodge", fill = "red") +
scale_y_continuous(labels = abs, expand = c(0, 0)) +
facet_wrap(~ Year, scales = "free_x") +
labs(title = "Top 10 Medal Winners Each Year") +
theme_minimal() +
theme(axis.text.x = element_blank(),  # Remove x-axis labels
axis.ticks.x = element_blank(), # Remove x-axis ticks
strip.text = element_text(size = 8)) + # Adjust strip text size
coord_flip() +
medal_plot
medal_plot <- ggplot(top_ten_medal_winners, aes(x = reorder(Country, Total_Medals), y = Total_Medals)) +
geom_bar(stat = "identity", position = "dodge", fill = "red") +
scale_y_continuous(labels = abs, expand = c(0, 0)) +
facet_wrap(~ Year, scales = "free_x") +
labs(title = "Top 10 Medal Winners Each Year") +
theme_minimal() +
theme(axis.text.x = element_blank(),  # Remove x-axis labels
axis.ticks.x = element_blank(), # Remove x-axis ticks
strip.text = element_text(size = 8)) + # Adjust strip text size
coord_flip() +
labs(
x = "Country",
y = "Number of Medals"
)
medal_plot
gdp_plot <- ggplot(top_gdp_countries, aes(x = reorder(Country, GDP), y = -1 * GDP)) +
geom_bar(stat = "identity", position = "dodge", fill = "blue") +
scale_y_continuous(labels = abs, expand = c(0, 0), position = "right") +
facet_wrap(~ Year, scales = "free_x") +
labs(title = "Top 10 GDP Countries Each Year") +
theme_minimal() +
theme(axis.text.x = element_blank(),  # Remove x-axis labels
axis.ticks.x = element_blank(), # Remove x-axis ticks
strip.text = element_text(size = 8)) +
coord_flip() +
labs(
x = "Country",
y = "GDP"
)
gdp_plot
grid.arrange(gdp_plot, medal_plot, ncol=2)
medal_plot <- ggplot(top_ten_medal_winners, aes(x = reorder(Country, Total_Medals), y = Total_Medals)) +
geom_bar(stat = "identity", position = "dodge", fill = "red") +
scale_y_continuous(labels = abs, expand = c(0, 0)) +
facet_wrap(~ Year, scales = "free_x") +
labs(title = "Top 10 Medal Winners Each Year") +
theme_minimal() +
coord_flip() +
labs(
x = "Country",
y = "Number of Medals"
)
gdp_plot <- ggplot(top_gdp_countries, aes(x = reorder(Country, GDP), y = -1 * GDP)) +
geom_bar(stat = "identity", position = "dodge", fill = "blue") +
scale_y_continuous(labels = abs, expand = c(0, 0), position = "right") +
facet_wrap(~ Year, scales = "free_x") +
labs(title = "Top 10 GDP Countries Each Year") +
theme_minimal() +
coord_flip() +
labs(
x = "Country",
y = "GDP"
)
grid.arrange(gdp_plot, medal_plot, ncol=2)
gdp_plot <- ggplot(top_gdp_countries, aes(x = reorder(Country, GDP), y = -1 * GDP)) +
geom_bar(stat = "identity", position = "dodge", fill = "blue") +
scale_y_continuous(labels = abs, expand = c(0, 0)) +
facet_wrap(~ Year, scales = "free_x") +
labs(title = "Top 10 GDP Countries Each Year") +
theme_minimal() +
coord_flip() +
labs(
x = "Country",
y = "GDP"
)
grid.arrange(gdp_plot, medal_plot, ncol=2)
medal_plot <- ggplot(top_ten_medal_winners, aes(x = reorder(Country, Total_Medals), y = Total_Medals)) +
geom_bar(stat = "identity", position = "dodge", fill = "red") +
scale_y_continuous(labels = abs, expand = c(0, 0)) +
scale_x_continuous(postiion = "top") +
facet_wrap(~ Year, scales = "free_x") +
labs(title = "Top 10 Medal Winners Each Year") +
theme_minimal() +
coord_flip() +
labs(
x = "Country",
y = "Number of Medals"
)
medal_plot <- ggplot(top_ten_medal_winners, aes(x = reorder(Country, Total_Medals), y = Total_Medals)) +
geom_bar(stat = "identity", position = "dodge", fill = "red") +
scale_y_continuous(labels = abs, expand = c(0, 0)) +
scale_x_continuous(position = "top") +
facet_wrap(~ Year, scales = "free_x") +
labs(title = "Top 10 Medal Winners Each Year") +
theme_minimal() +
coord_flip() +
labs(
x = "Country",
y = "Number of Medals"
)
grid.arrange(gdp_plot, medal_plot, ncol=2)
medal_plot <- ggplot(top_ten_medal_winners, aes(x = reorder(Country, Total_Medals), y = Total_Medals)) +
geom_bar(stat = "identity", position = "dodge", fill = "red") +
scale_y(labels = abs, expand = c(0, 0)) +
scale_x_continuous(position = "top") +
facet_wrap(~ Year, scales = "free_x") +
labs(title = "Top 10 Medal Winners Each Year") +
theme_minimal() +
coord_flip() +
labs(
x = "Country",
y = "Number of Medals"
)
facet_wrap(~ Year, scales = "free_x") +
labs(title = "Top 10 Medal Winners Each Year") +
theme_minimal() +
coord_flip() +
labs(
x = "Country",
y = "Number of Medals"
)
medal_plot <- ggplot(top_ten_medal_winners, aes(x = reorder(Country, Total_Medals), y = Total_Medals)) +
geom_bar(stat = "identity", position = "dodge", fill = "red") +
scale_y_continuous(labels = abs, expand = c(0, 0)) +
scale_x_discrete(position = "top") +
facet_wrap(~ Year, scales = "free_x") +
labs(title = "Top 10 Medal Winners Each Year") +
theme_minimal() +
coord_flip() +
labs(
x = "Country",
y = "Number of Medals"
)
grid.arrange(gdp_plot, medal_plot, ncol=2)
top_imm_rates_countries <- df_full %>%
filter(Year == 2016) %>%
group_by(Year) %>%
arrange(desc(Immigration_Perc_of_total_Pop)) %>%
slice(1:10) %>%
mutate(Category = "Top Immigration Rates")
imm_rate_plot <- ggplot(top_imm_rates_countries, aes(x = reorder(Country, Immigration_Perc_of_total_Pop), y = -1 * Immigration_Perc_of_total_Pop)) +
geom_bar(stat = "identity", position = "dodge", fill = "blue") +
scale_y_continuous(labels = abs, expand = c(0, 0)) +
labs(title = "Top 10 Immigration Rates Countries",
x = "Country",
y = "Immigration Rate % of Population") +
theme_minimal() +
coord_flip()
imm_rate_plot
gdp_plot <- ggplot(top_gdp_countries, aes(x = reorder(Country, GDP), y = -1 * GDP)) +
geom_bar(stat = "identity", position = "dodge", fill = "blue") +
scale_y_continuous(labels = abs, expand = c(0, 0)) +
labs(title = "Top 10 GDP Countries",
x = "Country",
y = "GDP") +
theme_minimal() +
coord_flip()
gdp_plot
medal_plot <- ggplot(top_ten_medal_winners, aes(x = reorder(Country, Total_Medals), y = Total_Medals)) +
geom_bar(stat = "identity", position = "dodge", fill = "red") +
scale_y_continuous(labels = abs, expand = c(0, 0)) +
scale_x_discrete(position = "top") +
labs(title = "Top 10 Medal Winners Each Year",
x = "Country",
y = "Number of Medals") +
theme_minimal() +
coord_flip()
medal_plot
View(top_imm_rates_countries)
imm_rate_plot <- ggplot(top_imm_rates_countries, aes(x = reorder(Country, Immigration_Perc_of_total_Pop), y = -1 * Immigration_Perc_of_total_Pop)) +
geom_bar(stat = "identity", position = "dodge", fill = "blue") +
scale_y_continuous(labels = abs, expand = c(0, 0)) +
labs(title = "Top 10 Immigration Rates Countries",
x = "Country",
y = "Immigration Rate % of Population") +
theme_minimal() +
coord_flip()
imm_rate_plot
imm_rate_plot <- ggplot(top_imm_rates_countries, aes(x = reorder(Country, Immigration_Perc_of_total_Pop), y = (-1 * Immigration_Perc_of_total_Pop))) +
geom_bar(stat = "identity", position = "dodge", fill = "blue") +
scale_y_continuous(labels = abs, expand = c(0, 0)) +
labs(title = "Top 10 Immigration Rates Countries",
x = "Country",
y = "Immigration Rate % of Population") +
theme_minimal() +
coord_flip()
imm_rate_plot
top_imm_rates_countries$Immigration_Perc_of_total_Pop <- as.numeric(as.character(top_imm_rates_countries$Immigration_Perc_of_total_Pop))
imm_rate_plot <- ggplot(top_imm_rates_countries, aes(x = reorder(Country, Immigration_Perc_of_total_Pop), y = (-1 * Immigration_Perc_of_total_Pop))) +
geom_bar(stat = "identity", position = "dodge", fill = "blue") +
scale_y_continuous(labels = abs, expand = c(0, 0)) +
labs(title = "Top 10 Immigration Rates Countries",
x = "Country",
y = "Immigration Rate % of Population") +
theme_minimal() +
coord_flip()
imm_rate_plot
View(top_gdp_countries)
# top 10 countries medals vs top 10 countries immigration
df_full <- df_full %>%
mutate(
Immigration_Perc_of_total_Pop = as.numeric(as.character(Immigration_Perc_of_total_Pop)))
top_imm_rates_countries <- df_full %>%
filter(Year == 2016) %>%
group_by(Year) %>%
arrange(desc(Immigration_Perc_of_total_Pop)) %>%
slice(1:10) %>%
mutate(Category = "Top Immigration Rates")
View(top_imm_rates_countries)
imm_rate_plot <- ggplot(top_imm_rates_countries, aes(x = reorder(Country, Immigration_Perc_of_total_Pop), y = (-1 * Immigration_Perc_of_total_Pop))) +
geom_bar(stat = "identity", position = "dodge", fill = "blue") +
scale_y_continuous(labels = abs, expand = c(0, 0)) +
labs(title = "Top 10 Immigration Rates Countries",
x = "Country",
y = "Immigration Rate % of Population") +
theme_minimal() +
coord_flip()
imm_rate_plot
grid.arrange(gdp_plot, medal_plot, ncol=2)
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
grid.arrange(imm_rate_plot, medal_plot, ncol = 2)
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
runApp('~/GitHub/Data-332-Final Project/Olympic Medals App.R')
